// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique()
  plan        Plan?         @relation(fields: [planId], references: [id])
  planId      String?
  password    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  updatedBy   String?
  UserRoleMap UserRoleMap[]
  UserSongMap UserSongMap[]
}

model UserRole {
  id          String        @id @default(cuid())
  description String        @unique()
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  updatedBy   String?
  UserRoleMap UserRoleMap[]
}

model UserRoleMap {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  role      UserRole  @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  createdBy String?
  updatedBy String?
}

model Plan {
  id          String        @id @default(cuid())
  title       String        @unique()
  description String        @unique()
  maxSong     Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  updatedBy   String?
  User        User[]
  SongPlanMap SongPlanMap[]
}

model Song {
  id          String        @id @default(cuid())
  name        String        @unique()
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  updatedBy   String?
  SongPlanMap SongPlanMap[]
  UserSongMap UserSongMap[]
}

model SongPlanMap {
  id        String    @id @default(cuid())
  song      Song      @relation(fields: [songId], references: [id])
  songId    String
  plan      Plan      @relation(fields: [planId], references: [id])
  planId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  createdBy String?
  updatedBy String?
}

model UserSongMap {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  song        Song      @relation(fields: [songId], references: [id])
  songId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  createdBy   String?
  updatedBy   String?
}
